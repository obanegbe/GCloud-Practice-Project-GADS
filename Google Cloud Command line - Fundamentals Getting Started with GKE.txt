Google Cloud Fundamentals: Getting Started with GKE


Objectives

-To provision a Kubernetes cluster using Kubernetes Engine.

-To deploy and manage Docker containers using kubectl



Steps:

1. Confirm that needed APIs are enabled


2. Start a Kubernetes Engine cluster

	#open the cloud shell sdk environment

	#place the zone assigned to you into an environment variable called MY_ZONE

		export MY_ZONE=

	#followed by the zone assigned to you

		export MY_ZONE=us-central1-a


	#Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes

		gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2

	#After the cluster is created, check your installed version of Kubernetes using the kubectl version command

		kubectl version

	#Result

		The gcloud container clusters create command automatically authenticated kubectl for you.

3. Run and deploy a container

	#From your Cloud Shell prompt, launch a single instance of the nginx container. (Nginx is a popular web server.)

		kubectl create deploy nginx --image=nginx:1.17.10

	#View the pod running the nginx container

		kubectl get pods

	#Expose the nginx container to the Internet:

		kubectl expose deployment nginx --port 80 --type LoadBalancer

	#Result

		Kubernetes created a service and an external load balancer with a public IP address attached to it. The IP address remains the same for the life of the service. Any network traffic to that public IP address is routed to pods behind the service: in this case, the nginx pod.

	#View the new service

		kubectl get services

	#Open a new web browser tab and paste your cluster's external IP address into the address bar

	#Result

		The default home page of the Nginx browser is displayed

	#Scale up the number of pods running on your service

		kubectl scale deployment nginx --replicas 3

	#Confirm that Kubernetes has updated the number of pods:

		kubectl get pods

	#Confirm that your external IP address has not changed:

		kubectl get services

	#Refresh the web browser tab in which you viewed your cluster's external IP address

		the nginx web server is still responding